<!-- turn debug=true on for logback-test.xml to help debug logging configurations. -->
<configuration debug="false"> 

  <!--
  We prefer logging to console instead of a File. Its very easy
  to pipe console output to a file and most organizations already
  have a log rotation setup in place. It can also be faster to use this
  approach vs using a FileAppender directly
  -->
  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>${user.home}/logs/nvbank.log</file>
        <append>false</append>
        <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>
  
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"> 
    <!-- encoders are  by default assigned the type
         ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <!--
  We prefer a default setting of WARN and turn on logging explicitly for
  any packages we care about. INFO is also a good choice. Going lower than INFO
  may log sensitive data such as passwords or api tokens via HTTP or networking
  libraries. Remember these defaults impact third party libraries as well.
  
  Often times the cost of logging is overlooked. Try a simple benchmark of
  logging in a tight loop a few million iterations vs not logging and see the difference.
  There are a few ways you can change logging levels on the fly in a running app.
  This could be a better solution than over logging.
  -->
  <root level="INFO">
    <!--
    If you want async logging just use ref="ASYNC" instead.
    We will favor synchronous logging for simplicity. -->
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE" />
  </root>
</configuration>